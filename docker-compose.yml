services:
  web:
    build:
      context: .
      dockerfile: frontend/Dockerfile.simple
      args:
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
        - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL}
        - NEXT_PUBLIC_AUTH_ENABLED=${NEXT_PUBLIC_AUTH_ENABLED}
        - NEXT_PUBLIC_VX_MAX=${VX_MAX}
        - NEXT_PUBLIC_VY_MAX=${VY_MAX}
    ports:
      - "${WEB_PORT:-3000}:3000"
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL}
      - NEXT_PUBLIC_AUTH_ENABLED=${NEXT_PUBLIC_AUTH_ENABLED}
      - NEXT_PUBLIC_VX_MAX=${VX_MAX}
      - NEXT_PUBLIC_VY_MAX=${VY_MAX}
    depends_on:
      - node-api
    networks:
      - teleop_net

  node-api:
    build:
      context: .
      dockerfile: backend/Dockerfile
    ports:
      - "${NODE_PORT:-3001}:3001"
    environment:
      - NODE_PORT=${NODE_PORT}
      - MONGO_URI=${MONGO_URI}
      - FLEET_API_URL=${FLEET_API_URL}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - VX_MAX=${VX_MAX}
      - VY_MAX=${VY_MAX}
      - ZENOH_LOCATOR=${ZENOH_LOCATOR}
      - Z_KEY_CMD_VEL=${Z_KEY_CMD_VEL}
      - AUTH_ENABLED=${AUTH_ENABLED}
      - API_KEYS=${API_KEYS}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
    depends_on:
      - mongo
      - fleet-api
    networks:
      - teleop_net

  fleet-api:
    build:
      context: .
      dockerfile: fleet-server/Dockerfile
    ports:
      - "${FLEET_PORT:-8000}:8000"
    environment:
      - PORT=${FLEET_PORT}
      - ZENOH_LOCATOR=${ZENOH_LOCATOR}
      - Z_KEY_CMD_VEL=${Z_KEY_CMD_VEL}
      - VX_MAX=${VX_MAX}
      - VY_MAX=${VY_MAX}
      - AUTH_ENABLED=${AUTH_ENABLED}
      - API_KEYS=${API_KEYS}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
      - zenoh
    networks:
      - teleop_net

  mongo:
    image: mongo:7
    ports:
      - "${MONGO_PORT:-27017}:27017"
    environment:
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}
    volumes:
      - mongo_data:/data/db
    networks:
      - teleop_net

  zenoh:
    image: eclipse/zenoh:latest
    command: ["-c", "/zenoh-config.json5"]
    ports:
      - "${ZENOH_PORT:-7447}:7447"
      - "${ZENOH_REST_PORT:-8080}:8080"
    volumes:
      - ./zenoh-config.json5:/zenoh-config.json5:ro
    environment:
      - RUST_LOG=${RUST_LOG}
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8080/@/router/local"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - teleop_net

  bridge:
    image: eclipse/zenoh-bridge-ros2dds:latest
    command: ["-c", "/zenoh-bridge-config.json5"]
    volumes:
      - ./zenoh-bridge-config.json5:/zenoh-bridge-config.json5:ro
      - ./fastdds-config.xml:/fastdds-config.xml:ro
    environment:
      - ROS_DOMAIN_ID=${ROS_DOMAIN_ID}
      - ROS_DISTRO=${ROS_DISTRO}
      - ROS_LOCALHOST_ONLY=${ROS_LOCALHOST_ONLY}
      - RMW_IMPLEMENTATION=${RMW_IMPLEMENTATION}
      - FASTRTPS_DEFAULT_PROFILES_FILE=${FASTRTPS_DEFAULT_PROFILES_FILE}
      - RUST_LOG=${RUST_LOG_BRIDGE}
    depends_on:
      zenoh:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - teleop_net

  robot:
    build:
      context: .
      dockerfile: robot/Dockerfile
    environment:
      - ROS_DOMAIN_ID=${ROS_DOMAIN_ID}
      - ROS_LOCALHOST_ONLY=${ROS_LOCALHOST_ONLY}
      - RMW_IMPLEMENTATION=${RMW_IMPLEMENTATION}
      - FASTRTPS_DEFAULT_PROFILES_FILE=${FASTRTPS_DEFAULT_PROFILES_FILE}
    depends_on:
      - bridge
    networks:
      - teleop_net
    profiles:
      - robot

volumes:
  mongo_data:

networks:
  teleop_net:
    driver: bridge
